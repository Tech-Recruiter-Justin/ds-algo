package net.justinchoi.dsalgo.binary_search;

import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class BinarySearchTest {

    private final List<Integer> case1 = new LinkedList<>(Arrays.asList(4,7,12,33,100,345));
    private final List<Integer> case2 = new LinkedList<>(Arrays.asList(

    ));
    private final List<Integer> singleNumCase = new LinkedList<>(Arrays.asList(3459));
    private final List<Integer> emptyCase = new LinkedList<>();

    @Test
    public void binarySearch_ListThatContainsTarget_ReturnsTarget() {
        int result = BinarySearch.binarySearch(case1, 7);
        assertEquals(1, result);
        int result2 = BinarySearch.binarySearch(case2, -974297311);
        assertEquals(10, result2);
        int result3 = BinarySearch.binarySearch(case2, 998966811);
        assertEquals(999, result3);
    }

    @Test
    public void binarySearch_ListWithoutTarget_ReturnsNegativeOne() {
        int result = BinarySearch.binarySearch(case1, 1000);
        assertEquals(-1, result);
    }

    @Test
    public void binarySearch_SingleNumberListWithTarget_ReturnsTarget() {
        int result = BinarySearch.binarySearch(singleNumCase, 3459);
        assertEquals(0, result);
    }

    @Test
    public void binarySearch_EmptyList_ReturnsNegativeOne() {
        int result = BinarySearch.binarySearch(emptyCase, 1);
        assertEquals(-1, result);
    }

    @Test
    public void binarySearchRecursive_ListThatContainsTarget_ReturnsTarget() {
        int result = BinarySearch.binarySearchRecursive(case1, 7);
        assertEquals(1, result);
        int result2 = BinarySearch.binarySearchRecursive(case2, -974297311);
        assertEquals(10, result2);
        int result3 = BinarySearch.binarySearchRecursive(case2, 998966811);
        assertEquals(999, result3);
    }

    @Test
    public void binarySearchRecursive_ListWithoutTarget_ReturnsNegativeOne() {
        int result = BinarySearch.binarySearchRecursive(case1, 1000);
        assertEquals(-1, result);
    }

    @Test
    public void binarySearchRecursive_SingleNumberListWithTarget_ReturnsTarget() {
        int result = BinarySearch.binarySearchRecursive(singleNumCase, 3459);
        assertEquals(0, result);
    }

    @Test
    public void binarySearchRecursive_EmptyList_ReturnsNegativeOne() {
        int result = BinarySearch.binarySearchRecursive(emptyCase, 1);
        assertEquals(-1, result);
    }

}
